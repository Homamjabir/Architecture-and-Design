[{"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\index.js":"1","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\App.js":"2","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\login.js":"3","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\footer.js":"4","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\header.js":"5","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\home.js":"6","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\registration.js":"7","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\api.js":"8","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\application.js":"9","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\i18n.js":"10","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\locales\\en\\translation.js":"11","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\locales\\sv\\translation.js":"12","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\incomplete.js":"13","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\all-users.js":"14"},{"size":396,"mtime":1614889245133,"results":"15","hashOfConfig":"16"},{"size":1511,"mtime":1615453052608,"results":"17","hashOfConfig":"16"},{"size":4122,"mtime":1615382868148,"results":"18","hashOfConfig":"16"},{"size":395,"mtime":1614340918344,"results":"19","hashOfConfig":"16"},{"size":3003,"mtime":1615453721015,"results":"20","hashOfConfig":"16"},{"size":745,"mtime":1614898813248,"results":"21","hashOfConfig":"16"},{"size":6432,"mtime":1615384635645,"results":"22","hashOfConfig":"16"},{"size":772,"mtime":1615453918520,"results":"23","hashOfConfig":"16"},{"size":353,"mtime":1614787313909,"results":"24","hashOfConfig":"16"},{"size":481,"mtime":1614889218484,"results":"25","hashOfConfig":"16"},{"size":1509,"mtime":1615453367499,"results":"26","hashOfConfig":"16"},{"size":1552,"mtime":1615453380748,"results":"27","hashOfConfig":"16"},{"size":6049,"mtime":1615385512736,"results":"28","hashOfConfig":"16"},{"size":347,"mtime":1615450961848,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"15r7rfj",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\index.js",[],["64","65"],"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\App.js",["66"],"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\login.js",["67","68"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Col from 'react-bootstrap/Form'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport  ApiCall  from \"./api\"\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport \"./css/login.css\"\r\n\r\nconst Login = ({setSessionToken}) => {\r\n  const { t, i18n } = useTranslation();\r\n  const history = useHistory();\r\n\r\n  const [initialValues, setInitialValues] = useState({\r\n    email: '',\r\n    username: '',\r\n    password: ''\r\n  });\r\n\r\n  /**\r\n   * Sets the new value\r\n   * @param {JSON} event \r\n   */\r\n  const onChange = event => {\r\n    setInitialValues(prevState =>  ({\r\n      ...prevState,\r\n      [event.target.name] : event.target.value\r\n    }))\r\n  };  \r\n\r\n  /**\r\n   * Called when user submits\r\n   * @param {JSON} values \r\n   */\r\n  const onSubmit = (values) => {\r\n    \r\n    if(validateEmail(values.username)) {\r\n      values.email = values.username;\r\n      values.username = '';\r\n    }\r\n    else {\r\n      values.email = '';\r\n    }\r\n    \r\n\r\n    ApiCall(\"POST\", \"api/person/login\", values, null).then(response => {\r\n      alert(\"login succesfull\");\r\n      setSessionToken(response.accessToken)\r\n      \r\n    }).catch(error => {\r\n      \r\n      if(error.accessToken !== undefined)\r\n        history.push({pathname: \"/incomplete\", state: { \"username\": values.username, \"email\": values.email, \"password\": values.password, \"accessToken\": error.accessToken}})\r\n      else\r\n        alert(\"invalid username or password\");\r\n    })\r\n    \r\n  }\r\n\r\n  function validateEmail(email) {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  }\r\n\r\n  \r\n  const schema = yup.object().shape({\r\n    username: yup.string().required(t(\"validationUsernameOrPassword\")),\r\n    password: yup.string().required(t(\"validationPassword\")),\r\n  });\r\n\r\n\r\n  return (\r\n    <div className=\"loginContainer\">\r\n\r\n      <div className=\"loginFormContainer\">\r\n        <Formik\r\n          enableReinitialize={true}\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          onChange={onChange}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            errors,\r\n          }) => (\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n\r\n              <Form.Row>\r\n\r\n                <Form.Group className=\"mr-3\" as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"logUsernameOrEmail\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    \r\n                    name=\"username\"\r\n                    defaultValue={initialValues.username}\r\n                    onChange={onChange}\r\n                    isInvalid={!!errors.username}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.username}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n\r\n                <Form.Group as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regPassword\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    \r\n                    name=\"password\"\r\n                    defaultValue={initialValues.password}\r\n                    onChange={onChange}\r\n                    isInvalid={!!errors.password}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.password}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n              </Form.Row>\r\n\r\n              <Button type=\"submit\">{t(\"logButton\")}</Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      <p>\r\n        {t(\"logText.text1\")} <Nav.Link href=\"/registration\"><strong>{t(\"logText.text2\")}</strong></Nav.Link>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Login;","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\footer.js",[],"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\header.js",[],"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\home.js",["69"],"import React from \"react\";\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { useTranslation } from 'react-i18next';\r\nimport \"./css/home.css\"\r\n\r\nconst Home = () => {\r\n  const { t, i18n } = useTranslation();\r\n\r\n\r\n\r\n  return (\r\n    <div className = \"homePageContainer\">\r\n      <div className = \"videoContainer\">\r\n          <video autoPlay loop muted>\r\n            <source src=\"//videos.ctfassets.net/ds6dz7ilx8up/3zsCYZmfrLkqNFtvnJeVBq/66aa467c8617368c9c0390c17be0463a/Monster_tom_web.mp4\" type=\"video/mp4\"></source>\r\n          </video>\r\n\r\n          <h1>{t(\"homePageTitle\")}</h1>\r\n\r\n          <Nav.Link href=\"/registration\"><button type=\"button\">{t(\"homePageButton\")}</button></Nav.Link>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Home;","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\registration.js",["70","71"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Col from 'react-bootstrap/Form'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport  ApiCall  from \"./api\"\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport \"./css/registration.css\"\r\n\r\n\r\nconst Registration = () => {\r\n  const history = useHistory();\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const [initialValues, setInitialValues] = useState({\r\n    name: '',\r\n    surname: '',\r\n    ssn: '',\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    roleId: 2,\r\n  });\r\n\r\n  /**\r\n   * Uppdates the state that has changed\r\n   * @param {event} event \r\n   */\r\n  const onChange = (event) => {\r\n    setInitialValues(prevState =>  ({\r\n      ...prevState,\r\n      [event.target.name] : event.target.value\r\n    }))\r\n  };  \r\n\r\n  /**\r\n   * Makes a signup request with the recevied values\r\n   * and displays the result to the user in an alert\r\n   * @param {JSON} values \r\n   */\r\n  const onSubmit = (values) => {\r\n    console.log(values)\r\n    ApiCall(\"POST\", \"api/person/signup\", values, null).then(response => {\r\n      history.push('/login')\r\n      //alert(\"registration succesfull\");\r\n    }).catch(error => {\r\n      console.log(error)\r\n      alert(error.error);\r\n    })\r\n \r\n  }\r\n\r\n  const schema = yup.object().shape({\r\n    name: yup.string().required(t(\"validationFirstName\")),\r\n    surname: yup.string().required(t(\"validationLastName\")),\r\n    ssn: yup.number(\"Enter a number\").required(t(\"validationDOB\")).positive(\"Positive number\").integer(\"Number\")/*.test('len', t(\"validationDOBLength\"), val => val.length === 12)*/,\r\n    username: yup.string().required(t(\"validationUsername\")),\r\n    email: yup.string().email(t(\"validationEmail.inv\")).required(t(\"validationEmail.req\")),\r\n    password: yup.string().required(t(\"validationPassword\")),\r\n  });\r\n  \r\n  return (\r\n    <div className=\"registrationContainer\">\r\n      <div className=\"registrationFormContainer\">\r\n        <Formik\r\n          enableReinitialize={true}\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          onChange={onChange}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            errors,\r\n            }) => (\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n\r\n              <Form.Row>\r\n\r\n              <Form.Group className=\"mr-3\" as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regFirstName\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    \r\n                    name=\"name\"\r\n                    defaultValue={initialValues.name}\r\n                    onChange={onChange}\r\n                    isInvalid={errors.name}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.name}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regLastName\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    \r\n                    name=\"surname\"\r\n                    defaultValue={initialValues.surname}\r\n                    onChange={onChange}\r\n                    isInvalid={errors.surname}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.surname}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n              </Form.Row>\r\n\r\n\r\n              <Form.Row>\r\n\r\n                <Form.Group className=\"mr-3\" as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regDOB\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    \r\n                    name=\"ssn\"\r\n                    defaultValue={initialValues.ssn}\r\n                    onChange={onChange}\r\n                    isInvalid={!!errors.ssn}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.ssn}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regUsername\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    \r\n                    name=\"username\"\r\n                    defaultValue={initialValues.username}\r\n                    onChange={onChange}\r\n                    isInvalid={!!errors.username}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.username}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n              </Form.Row>\r\n\r\n              <Form.Row>\r\n\r\n                <Form.Group className=\"mr-3\" as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regEmail\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    \r\n                    name=\"email\"\r\n                    defaultValue={initialValues.email}\r\n                    onChange={onChange}\r\n                    isInvalid={!!errors.email}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.email}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regPassword\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    \r\n                    name=\"password\"\r\n                    defaultValue={initialValues.password}\r\n                    onChange={onChange}\r\n                    isInvalid={!!errors.password}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.password}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n              </Form.Row>\r\n\r\n              <Button type=\"submit\">{t(\"regButton\")}</Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      <p>\r\n        {t(\"regText.text1\")}<Nav.Link href=\"/login\"><strong>{t(\"regText.text2\")}</strong></Nav.Link>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Registration;","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\api.js",[],"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\application.js",[],"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\i18n.js",["72"],"import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\"\r\n\r\ni18n\r\n  .use(initReactI18next)\r\n  .init( {\r\n    resources: {\r\n      en: {translation: \"../public/locales/translation.js\"},\r\n      sv: {translation: \"../public/locales/translation.js\"},\r\n    },\r\n    lng: \"en\",\r\n    fallbackLng: \"en\",\r\n    interpolation: {escapeValue: false},\r\n  });\r\nexport default i18n;","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\locales\\en\\translation.js",[],"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\locales\\sv\\translation.js",[],"C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\incomplete.js",["73","74"],"import React, { useEffect, useState } from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Col from 'react-bootstrap/Form'\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport  ApiCall  from \"./api\"\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./css/incomplete.css\"\r\n\r\nconst Incomplete = () => {\r\n\r\n  const [showEmailForm, setShowEmailForm] = useState(false);\r\n  const [initialValues, setInitialValues] = useState({\r\n    name: '',\r\n    surname: '',\r\n    ssn: '',\r\n    email: '',\r\n    username: ''\r\n  });\r\n  const { t, i18n } = useTranslation();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    \r\n    whatToShow(location.state)\r\n  },[])\r\n\r\n  const whatToShow = (userCredentials) => {\r\n    if(userCredentials.email === \"\") {\r\n      setShowEmailForm(true);\r\n      initialValues.username = location.state.username;\r\n    }\r\n    else {\r\n      setShowEmailForm(false);\r\n      initialValues.email = location.state.email;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n\r\n  /**\r\n   * Uppdates the state that has changed\r\n   * @param {event} event \r\n   */\r\n  const onChange = (event) => {\r\n   \r\n    setInitialValues(prevState =>  ({\r\n      ...prevState,\r\n      [event.target.name] : event.target.value\r\n    }))\r\n  };  \r\n\r\n  /**\r\n   * Makes a signup request with the recevied values\r\n   * and displays the result to the user in an alert\r\n   * @param {JSON} values \r\n   */\r\n  const onSubmit = (values) => {\r\n\r\n      //values.username = location.state.username;\r\n      values.password = location.state.password;\r\n      console.log(values)\r\n      \r\n    ApiCall(\"POST\", \"api/person/update\", values, location.state.accessToken).then(response => {\r\n      //alert(\"registration succesfull\");\r\n      console.log(response)\r\n    }).catch(error => {\r\n      alert(error.error);\r\n    })\r\n  }\r\n\r\n  const schema = yup.object().shape({\r\n    name: yup.string().required(t(\"validationFirstName\")),\r\n    surname: yup.string().required(t(\"validationLastName\")),\r\n    ssn: yup.number(\"Enter a number\").required(t(\"validationDOB\")).positive(\"Positive number\").integer(\"Number\"),\r\n    // email: yup.string().email(t(\"validationEmail.inv\")).required(t(\"validationEmail.req\")),\r\n    // username: yup.string().required(t(\"validationUsername\"))\r\n  });\r\n  \r\n  return (\r\n    <div className=\"incompleteContainer\">\r\n        <h1>\r\n            {t(\"incompleteText\")}\r\n        </h1>\r\n        <div className=\"incompleteFormContainer\">\r\n\r\n        <Formik\r\n          enableReinitialize={true}\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          onChange={onChange}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            errors,\r\n            }) => (\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n\r\n              <Form.Row>\r\n\r\n              <Form.Group as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regFirstName\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    defaultValue={initialValues.name}\r\n                    onChange={onChange}\r\n                    isInvalid={errors.name}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.name}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regLastName\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"surname\"\r\n                    defaultValue={initialValues.surname}\r\n                    onChange={onChange}\r\n                    isInvalid={errors.surname}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.surname}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n              </Form.Row>\r\n\r\n\r\n              <Form.Row>\r\n\r\n                <Form.Group as={Col} md=\"6\" >\r\n                  <Form.Label>{t(\"regDOB\")}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"ssn\"\r\n                    defaultValue={initialValues.ssn}\r\n                    onChange={onChange}\r\n                    isInvalid={!!errors.ssn}\r\n                  />\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.ssn}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n\r\n\r\n                {showEmailForm ?                 \r\n                  <Form.Group as={Col} md=\"6\" >\r\n                    <Form.Label>{t(\"regEmail\")}</Form.Label>\r\n                    <Form.Control\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      defaultValue={initialValues.email}\r\n                      onChange={onChange}\r\n                      isInvalid={!!errors.email}\r\n                    />\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.email}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group> : \r\n                  <Form.Group as={Col} md=\"6\" >\r\n                    <Form.Label>{t(\"regUsername\")}</Form.Label>\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      name=\"username\"\r\n                      defaultValue={initialValues.username}\r\n                      onChange={onChange}\r\n                      isInvalid={!!errors.username}\r\n                    />\r\n          \r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.username}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                  }\r\n\r\n              </Form.Row>\r\n\r\n              <Button type=\"submit\">{t(\"incompleteButton\")}</Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Incomplete;","C:\\Users\\Homam\\Documents\\Skola\\Github\\Architecture-and-Design\\src\\components\\all-users.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":26},{"ruleId":"79","severity":1,"message":"83","line":10,"column":10,"nodeType":"81","messageId":"82","endLine":10,"endColumn":15},{"ruleId":"79","severity":1,"message":"84","line":14,"column":14,"nodeType":"81","messageId":"82","endLine":14,"endColumn":18},{"ruleId":"79","severity":1,"message":"84","line":7,"column":14,"nodeType":"81","messageId":"82","endLine":7,"endColumn":18},{"ruleId":"79","severity":1,"message":"83","line":10,"column":10,"nodeType":"81","messageId":"82","endLine":10,"endColumn":15},{"ruleId":"79","severity":1,"message":"84","line":16,"column":14,"nodeType":"81","messageId":"82","endLine":16,"endColumn":18},{"ruleId":"79","severity":1,"message":"85","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":24},{"ruleId":"79","severity":1,"message":"84","line":22,"column":14,"nodeType":"81","messageId":"82","endLine":22,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":28,"column":5,"nodeType":"88","endLine":28,"endColumn":7,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Trans' is defined but never used.","'i18n' is assigned a value but never used.","'LanguageDetector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state' and 'whatToShow'. Either include them or remove the dependency array.","ArrayExpression",["92"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [location.state, whatToShow]",{"range":"95","text":"96"},[782,784],"[location.state, whatToShow]"]